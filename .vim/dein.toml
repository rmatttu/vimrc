[[plugins]]
repo = 'Shougo/dein.vim'

# colorscheme
#[[plugins]]
#repo = 'joedicastro/vim-molokai256.git'
#
#[[plugins]]
#repo = 'brafales/vim-desert256.git'

# [[plugins]]
# repo = 'rakr/vim-one'

[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = 'altercation/vim-colors-solarized.git'


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'mode_map': { 'c': 'NORMAL' },
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component': {
        \   'lineinfo': '%3l:%-2v',
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '|', 'right': '|' }
        \ }
    " non powerline
    " \ 'separator': { 'left': '', 'right': '' },
    " \ 'subseparator': { 'left': '|', 'right': '|' }

    function! LightLineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
        " non powerline
        " return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightLineFilename()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \  &ft == 'unite' ? unite#get_status_string() :
                    \  &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
      if exists("*fugitive#head")
        let branch = fugitive#head()
        return branch
        " non powerline
        " return branch
      endif
      return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    " power line font sample
    "let g:airline_left_sep = ''
    "let g:airline_left_alt_sep = ''
    "let g:airline_right_sep = ''
    "let g:airline_right_alt_sep = ''
    "let g:airline_symbols.branch = ''
    "let g:airline_symbols.readonly = ''
    "let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
    let howm_dir = $HOME.'/.vim/howm'
    let QFixHowm_ListCloseOnJump = 1
    let QFixHowm_Folding = 0
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeShowBookmarks=1
    let NERDTreeShowHidden = 1
    "auto close if the only open a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']
hook_add = '''
    let g:nerdtree_tabs_open_on_gui_startup = 0
    let g:nerdtree_tabs_synchronize_focus = 1

    " バグるので使用しない(0)
    let g:nerdtree_tabs_autoclose = 0

    noremap tr :NERDTreeTabsToggle<CR>
    "noremap tr :NERDTreeToggle<CR>
    noremap tf :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'osyo-manga/vim-brightest'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace.git'

[[plugins]]
repo = 'mattn/sonictemplate-vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides.git'
if = "has('gui_running')"
hook_add = '''
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_start_level=2
    "let g:indent_guides_auto_colors=0
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#161616 ctermbg=gray
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#4f4f4f ctermbg=darkgray
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
if = "!has('gui_running')"
hook_add = '''
    let g:indentLine_enabled = 1
    " let g:indentLine_setColors = 0
    let g:indentLine_color_term = 239
    let g:indentLine_char = '|'
    " let g:indentLine_concealcursor = '.'
    " let g:indentLine_conceallevel = 2
    " let g:indentLine_setConceal = 0
'''

