[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
if = 'has("lua")'
hook_source = '''
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_source = '''
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

    "" Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    "" Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory= $HOME ."/.vim/snip"
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_i = 1

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
on_i = 1
depends = ['neomru.vim']
hook_source = '''
    let g:unite_enable_start_insert=1
    " バッファ一覧
    " noremap <C-P> :Unite buffer<CR>
    " ファイル一覧
    "noremap <C-B> :Unite buffer<CR>
    noremap tb :Unite buffer<CR>
    " 最近使ったファイルの一覧
    "noremap <C-Z> :Unite file_mru<CR>
    noremap tz :Unite file_mru<CR>

    " ウィンドウを分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
    au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
    " ウィンドウを縦に分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
    " ESCキーを2回押すと終了する
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    " 初期設定関数を起動する
    au FileType unite call s:unite_my_settings()
        function! s:unite_my_settings()
        " Overwrite settings.
    endfunction
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_path = '.*'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_i = 1

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_i = 1
hook_source = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_i = 1
hook_source = '''
    let g:multi_cursor_use_default_mapping=1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_path = '.*'

[[plugins]]
repo = 'tyru/caw.vim.git'
on_path = '.*'
hook_source = '''
    nmap <Leader>/ <Plug>(caw:hatpos:toggle)
    vmap <Leader>/ <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'amiorin/vim-textile'
on_ft = ['textile']

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown', 'mkd', 'md']
hook_source = '''
    function! s:isAtStartOfLine(mapping)
      let text_before_cursor = getline('.')[0 : col('.')-1]
      let mapping_pattern = '\V' . escape(a:mapping, '\')
      let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
      return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
    endfunction

    inoreabbrev <expr> <bar><bar>
              \ <SID>isAtStartOfLine('\|\|') ?
              \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
    inoreabbrev <expr> __
              \ <SID>isAtStartOfLine('__') ?
              \ '<c-o>:silent! TableModeDisable<cr>' : '__'

    let g:table_mode_corner='|'
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd', 'md']
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'mkd', 'md']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'mkd', 'md']
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_source = '''
    " *.mdファイルをmarkdownとみなす
    augroup PrevimSettings
        autocmd!
        autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
    augroup END

    nnoremap <Leader>o :PrevimOpen<CR>
'''

[[plugins]]
repo = 'sk1418/HowMuch'
on_i = 1


# 保留 {{{
# php用
# [[plugins]]
# repo = 'tobyS/vmustache'
#
# [[plugins]]
# repo = 'tobyS/pdv'
# depends = ['vmustache']
# hook_add = '''
#     " snip用はうまく動かない（tab移動できなかった）
#     " let g:pdv_template_dir = $HOME ."/.vim/dein.vim/repos/github.com/tobyS/pdv/templates_snip"
#     let g:pdv_template_dir = g:dein_dir ."/repos/github.com/tobyS/pdv/templates"
#     autocmd FileType php nnoremap <Leader>p :call pdv#DocumentCurrentLine()<CR>
# '''

# repo = 'nvie/vim-flake8'
# repo = 'heavenshell/vim-jsdoc'
# repo = 'mattn/sonictemplate-vim'

# "--------------------------------------------- test
# repo = 'heavenshell/vim-pydocstring'
# repo = 'tacroe/unite-mark'
# repo = 'jacquesbh/vim-showmarks'
# }}}

