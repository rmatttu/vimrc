[[plugins]]
repo = 'Shougo/dein.vim'

# colorscheme
#[[plugins]]
#repo = 'joedicastro/vim-molokai256.git'
#
#[[plugins]]
#repo = 'brafales/vim-desert256.git'

# [[plugins]]
# repo = 'rakr/vim-one'

[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = 'altercation/vim-colors-solarized.git'


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:powerline_char_readonly           = g:powerline_enable ? '' : 'x'
    let g:powerline_char_branch             = g:powerline_enable ? '' : ''
    let g:powerline_char_separator_left     = g:powerline_enable ? "\ue0b0" : ''
    let g:powerline_char_separator_right    = g:powerline_enable ? "\ue0b2": ''
    let g:powerline_char_subseparator_left  = g:powerline_enable ? "\ue0b1": '|'
    let g:powerline_char_subseparator_right = g:powerline_enable ? "\ue0b3": '|'

    let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'mode_map': { 'c': 'NORMAL' },
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component': {
        \   'lineinfo': '%3l:%-2v',
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \ },
        \ 'separator': { 'left': g:powerline_char_separator_left, 'right': g:powerline_char_separator_right },
        \ 'subseparator': { 'left': g:powerline_char_subseparator_left, 'right': g:powerline_char_subseparator_right }
        \ }

    function! LightLineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? g:powerline_char_readonly : ''
    endfunction

    function! LightLineFilename()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                    \  &ft == 'unite' ? unite#get_status_string() :
                    \  &ft == 'vimshell' ? vimshell#get_status_string() :
                    \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
      if exists("*fugitive#head")
        let branch = fugitive#head()
        return branch !=# '' ? g:powerline_char_branch . branch : ''
      endif
      return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    " power line font sample
    "let g:airline_left_sep = ''
    "let g:airline_left_alt_sep = ''
    "let g:airline_right_sep = ''
    "let g:airline_right_alt_sep = ''
    "let g:airline_symbols.branch = ''
    "let g:airline_symbols.readonly = ''
    "let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
    let howm_dir = $HOME.'/.vim/howm'
    let QFixHowm_ListCloseOnJump = 1
    let QFixHowm_Folding = 0
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim']
hook_source = '''
    let g:unite_enable_start_insert=1
    " バッファ一覧
    " noremap <C-P> :Unite buffer<CR>
    " ファイル一覧
    "noremap <C-B> :Unite buffer<CR>
    noremap tb :Unite buffer<CR>
    " 最近使ったファイルの一覧
    "noremap <C-Z> :Unite file_mru<CR>
    noremap tz :Unite file_mru<CR>

    " ウィンドウを分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
    au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
    " ウィンドウを縦に分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
    " ESCキーを2回押すと終了する
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    " 初期設定関数を起動する
    au FileType unite call s:unite_my_settings()
        function! s:unite_my_settings()
        " Overwrite settings.
    endfunction
'''

[[plugins]]
repo = 'Shougo/vimfiler'
depends = ['unite.vim']
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-brightest'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace.git'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
    let g:sonictemplate_vim_template_dir = ['~/.vim/template']
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides.git'
if = 'has("gui_running")'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_start_level=2
    "let g:indent_guides_auto_colors=0
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#161616 ctermbg=gray
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#4f4f4f ctermbg=darkgray
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
if = '!has("gui_running")'
hook_add = '''
    let g:indentLine_enabled = 1
    " let g:indentLine_setColors = 0
    let g:indentLine_color_term = 239
    let g:indentLine_char = '|'
    " let g:indentLine_concealcursor = '.'
    " let g:indentLine_conceallevel = 2
    " let g:indentLine_setConceal = 0
'''

[[plugins]]
repo = 'rmatttu/vim-uwsc'
hook_add = '''
    autocmd BufNewFile,BufReadPost *.uws set filetype=uwsc
'''

